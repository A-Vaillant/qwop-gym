---
# [int] (optional) Env seed (auto-generated if blank)
seed: ~

# [string] (optional) Unique ID of this run (auto-generated if blank)
run_id: ~

# [List<string>] List of paths for the recordings to train with
# Glob patterns are supported, eg. "data/recordings/*.rec"
recordings:
  - "data/recordings/recording-20230907214057-1910453007.rec"

# [string] Directory template to save the trained model, metadata and
# tensorboard logs. If the template contains {run_id} or {seed} placeholders,
# they will be replaced with the corresponding runtime values.
out_dir_template: "data/GAIL_PPO-{run_id}"

# [bool] Log tensorboard data
log_tensorboard: true

# [int] Fixed-length of each episode. More on why this is required:
# https://imitation.readthedocs.io/en/latest/main-concepts/variable_horizon.html
episode_len: 1000

# [int] Training duration
total_timesteps: 2000

# GAIL algorithm parameters
# https://imitation.readthedocs.io/en/latest/algorithms/gail.html#api
trainer_kwargs:
  demo_batch_size: 1024
  demo_minibatch_size: ~
  n_disc_updates_per_round: 4
  log_dir: ~
  gen_train_timesteps: ~
  gen_replay_buffer_capacity: ~
  debug_use_ground_truth: false
  allow_variable_horizon: false

# [string] Module name of the learner alrogirthm (eg. "stable_baselines3")
learner_module: "stable_baselines3"

# [string] Class name of the learner algorithm (eg. "PPO")
learner_cls: "PPO"

# Parameters for the learner algorithm
learner_kwargs:
  policy: "MlpPolicy"
  use_sde: false
  sde_sample_freq: 4
  n_steps: 64
  batch_size: 32
  gamma: 0.9
  gae_lambda: 0.98
  clip_range: 0.4
  normalize_advantage: true
  ent_coef: 0.001
  vf_coef: 0.5
  max_grad_norm: 3

# Schedule for the learning_rate as a function of the progress remaining.
# Possible values for `fn`:
#   * "const" - use `initial_value` as a constant value for the entire training
#   * "lin_decay" - starting with `initial_value`, multiply by `step` at even
#      intervals (but no more than `decays` times) until `min_value` is reached
# Example:
#   fn: "lin_decay"
#   initial_value: 0.01
#   step: 0.5
#   decays: 10
#   min_value: 0.001
# During training, the learning_rate (lr) changes like so:
# 0%: 0.01, 10%: 0.005, 20%: 0.0025, 30%: 0.000625, 40%: 0.000625, ...100%: 0.000625
# (0.000625 is below `min_value` so the learning rate remains unchanged)
learner_lr_schedule:
  fn: "const"
  initial_value: 0.003
  step: 0.75
  decays: 20
  min_value: 5.0e-05

# Env parameters
# The special "__include__" key allows to load them from another file.
# Keys listed here take precedence over keys loaded with __include__.
# See notes in `env.yml` for more info
env_kwargs:
  __include__: "config/env.yml"
  text_in_browser: "Do not close this window, training in progress..."

# List of gym wrappers to use for the env
# Each list element must be a dict with "module", "cls" and "kwargs" keys
env_wrappers: []
